/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("cash"), require("tippy"));
	else if(typeof define === 'function' && define.amd)
		define(["cash", "tippy"], factory);
	else if(typeof exports === 'object')
		exports["nifiCuiossUI"] = factory(require("cash"), require("tippy"));
	else
		root["nifiCuiossUI"] = factory(root["cash"], root["tippy"]);
})(self, (__WEBPACK_EXTERNAL_MODULE__651__, __WEBPACK_EXTERNAL_MODULE__566__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 566:
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE__566__;

/***/ }),

/***/ 607:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  init: () => (/* binding */ main_init)\n});\n\n// NAMESPACE OBJECT: ./src/main/webapp/js/components/tokenVerifier.js\nvar tokenVerifier_namespaceObject = {};\n__webpack_require__.r(tokenVerifier_namespaceObject);\n__webpack_require__.d(tokenVerifier_namespaceObject, {\n  __setIsLocalhostForTesting: () => (__setIsLocalhostForTesting),\n  init: () => (init)\n});\n\n// NAMESPACE OBJECT: ./src/main/webapp/js/components/issuerConfigEditor.js\nvar issuerConfigEditor_namespaceObject = {};\n__webpack_require__.r(issuerConfigEditor_namespaceObject);\n__webpack_require__.d(issuerConfigEditor_namespaceObject, {\n  __test_exports: () => (__test_exports),\n  init: () => (issuerConfigEditor_init)\n});\n\n// EXTERNAL MODULE: external \"cash\"\nvar external_cash_ = __webpack_require__(651);\nvar external_cash_default = /*#__PURE__*/__webpack_require__.n(external_cash_);\n// EXTERNAL MODULE: ./src/test/js/mocks/nf-common.js\nvar nf_common = __webpack_require__(709);\n;// ./src/main/webapp/js/utils/uiErrorDisplay.js\n/**\n * Utility for displaying standardized error messages in the UI.\n */\n\nvar extractErrorMessage = function extractErrorMessage(error, i18n) {\n  var message;\n\n  // Prefer responseJSON if it exists (more structured error from an API)\n  if (error && error.responseJSON && error.responseJSON.message) {\n    message = error.responseJSON.message;\n  } else if (error && error.responseJSON && Array.isArray(error.responseJSON.errors) && error.responseJSON.errors.length > 0) {\n    // Removed trailing space here\n    // Handle cases where errors might be an array of messages\n    message = error.responseJSON.errors.map(function (err) {\n      return typeof err === 'string' ? err : err.msg || 'Error detail missing';\n    }).join(', ');\n  }\n\n  // Fallback to responseText if responseJSON didn't yield a message\n  if (!message && error && error.responseText) {\n    try {\n      var errorJson = JSON.parse(error.responseText);\n      // Check if message property exists (even if it's an empty string), otherwise check for errors array\n      if (errorJson && typeof errorJson.message === 'string') {\n        message = errorJson.message;\n      } else if (errorJson && Array.isArray(errorJson.errors) && errorJson.errors.length > 0) {\n        message = errorJson.errors.map(function (err) {\n          return typeof err === 'string' ? err : err.msg || 'Error detail missing';\n        }).join(', '); // This line might also be long depending on err.msg\n      } else {\n        message = error.responseText; // Raw responseText if not structured\n      }\n    } catch (e) {\n      // responseText was not JSON, use as is or fallback further\n      message = error.responseText;\n    }\n  }\n\n  // Fallback to statusText for jqXHR objects if still no message\n  if (!message && error && error.statusText) {\n    message = error.statusText;\n  }\n\n  // Fallback for standard Error objects\n  if (!message && error && error.message) {\n    message = error.message;\n  }\n\n  // Final check for problematic messages (null, undefined, empty, \"null\", \"undefined\")\n  var isNullOrUndefined = message == null;\n  var trimmedMsg = isNullOrUndefined ? '' : String(message).trim();\n  var lowerCaseMsg = isNullOrUndefined ? '' : String(message).toLowerCase();\n  if (isNullOrUndefined || trimmedMsg === '' || lowerCaseMsg === 'null' || lowerCaseMsg === 'undefined') {\n    return i18n['processor.jwt.unknownError'] || 'Unknown error'; // Default unknown error\n  }\n  return message;\n};\n\n/**\n * Displays a standardized error message in the target DOM element.\n * This function is intended for scenarios where an actual error needs to be shown to the user\n * (i.e., not for localhost simulations that show success for errors).\n *\n * @param {object} $targetElement - A cash-dom wrapped element where the error HTML should be set.\n * @param {object|Error} error - The error object (e.g., jqXHR from an AJAX failure, or a standard Error object).\n * @param {object} i18n - The i18n map for localized strings.\n * @param {string} [errorTypeKey='processor.jwt.validationError'] - Optional i18n key for the \"error type\" prefix.\n */\nvar displayUiError = function displayUiError($targetElement, error, i18n) {\n  var errorTypeKey = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'processor.jwt.validationError';\n  var messageToDisplay = extractErrorMessage(error, i18n);\n  var failPrefix = i18n['processor.jwt.failed'] || 'Failed';\n  var errorTypePrefix = i18n[errorTypeKey] || 'Error'; // Default to \"Error\" if key not found\n\n  var errorHtml = \"<span style=\\\"color: var(--error-color); font-weight: bold;\\\">\".concat(failPrefix, \"</span> \") + \"\".concat(errorTypePrefix, \": \").concat(messageToDisplay);\n  $targetElement.html(errorHtml);\n};\n;// ./src/main/webapp/js/components/tokenVerifier.js\n/**\n * Token Verification Interface UI component.\n */\n\n\n\n'use strict';\nvar isLocalhostOverride = null; // Allows tests to control localhost behavior\n\n// Helper function to determine if running in a localhost-like environment\nvar tokenVerifier_getIsLocalhost = function getIsLocalhost() {\n  // Stays module-scoped\n  if (isLocalhostOverride !== null) {\n    return isLocalhostOverride;\n  }\n  // Default behavior: check window.location.href\n  return window.location.href.indexOf('localhost') !== -1 || window.location.href.indexOf('127.0.0.1') !== -1;\n};\n\n/**\n * Initialize the custom UI.\n *\n * @param {object} element - The DOM element\n * @param {object} _config - The component configuration (unused)\n * @param {string} _type - The component type (not used)\n * @param {Function} callback - The callback function\n */\nvar init = function init(element, _config, _type, callback) {\n  // Get i18n resources from NiFi Common\n  var i18n = nf_common.getI18n() || {};\n\n  // Create UI elements\n  var $container = external_cash_default()('<div class=\"token-verification-container\"></div>');\n\n  // Create token input area\n  var $inputSection = external_cash_default()('<div class=\"token-input-section\"></div>');\n  var $inputLabel = external_cash_default()('<label for=\"token-input\"></label>').text(i18n['processor.jwt.tokenInput'] || 'Enter Token:');\n  var $tokenInput = external_cash_default()('<textarea id=\"token-input\" class=\"token-input\" rows=\"5\"></textarea>').attr('placeholder', i18n['processor.jwt.tokenInputPlaceholder'] || 'Paste token here...');\n  var $verifyButton = external_cash_default()('<button type=\"button\" class=\"verify-token-button\"></button>').text(i18n['processor.jwt.verifyToken'] || 'Verify Token');\n  $inputSection.append($inputLabel).append($tokenInput).append($verifyButton);\n\n  // Create results area\n  var $resultsSection = external_cash_default()('<div class=\"token-results-section\"></div>');\n  var $resultsHeader = external_cash_default()('<h3></h3>').text(i18n['processor.jwt.verificationResults'] || 'Verification Results');\n  var $resultsContent = external_cash_default()('<div class=\"token-results-content\"></div>');\n  $resultsSection.append($resultsHeader).append($resultsContent);\n\n  // Add sections to container\n  $container.append($inputSection).append($resultsSection);\n\n  // Add container to element\n  external_cash_default()(element).append($container); // element is the parent div provided by NiFi\n\n  // Handle verify button click\n  $verifyButton.on('click', function () {\n    var token = $tokenInput.val().trim();\n    if (!token) {\n      $resultsContent.html('<div class=\"token-error\">' + (i18n['processor.jwt.noTokenProvided'] || 'No token provided') + '</div>');\n      return;\n    }\n    _resetUIAndShowLoading($resultsContent, i18n);\n    try {\n      external_cash_default().ajax({\n        method: 'POST',\n        url: '../nifi-api/processors/jwt/verify-token',\n        data: JSON.stringify({\n          token: token\n        }),\n        contentType: 'application/json',\n        dataType: 'json',\n        timeout: 5000\n      }).then(function (responseData) {\n        _handleTokenVerificationResponse(responseData, $resultsContent, i18n, _displayValidToken, _displayInvalidToken);\n      })[\"catch\"](function (jqXHR) {\n        _handleTokenVerificationAjaxError(jqXHR, $resultsContent, i18n, _displayValidToken);\n      });\n    } catch (e) {\n      _handleTokenVerificationSyncException(e, $resultsContent, i18n, _displayValidToken);\n    }\n  });\n\n  // Function to display valid token details (now private)\n  var _displayValidToken = function _displayValidToken(response, isSimulated) {\n    var html = '<div class=\"token-valid\">' + '<span class=\"fa fa-check-circle\"></span> ' + (i18n['processor.jwt.tokenValid'] || 'Token is valid');\n    if (isSimulated) {\n      html += ' <em>(Simulated response)</em>';\n    }\n    html += '</div>';\n    html += '<div class=\"token-details\">';\n    html += '<h4>' + (i18n['processor.jwt.tokenDetails'] || 'Token Details') + '</h4>';\n    html += '<table class=\"token-claims-table\">';\n    html += '<tr><th>' + (i18n['processor.jwt.subject'] || 'Subject') + '</th><td>' + (response.subject || '') + '</td></tr>';\n    html += '<tr><th>' + (i18n['processor.jwt.issuer'] || 'Issuer') + '</th><td>' + (response.issuer || '') + '</td></tr>';\n    html += '<tr><th>' + (i18n['processor.jwt.audience'] || 'Audience') + '</th><td>' + (response.audience || '') + '</td></tr>';\n    html += '<tr><th>' + (i18n['processor.jwt.expiration'] || 'Expiration') + '</th><td>' + (response.expiration || '') + '</td></tr>';\n    if (response.roles && response.roles.length > 0) {\n      html += '<tr><th>' + (i18n['processor.jwt.roles'] || 'Roles') + '</th><td>' + response.roles.join(', ') + '</td></tr>';\n    }\n    if (response.scopes && response.scopes.length > 0) {\n      html += '<tr><th>' + (i18n['processor.jwt.scopes'] || 'Scopes') + '</th><td>' + response.scopes.join(' ') + '</td></tr>';\n    }\n    html += '</table>';\n    html += '<h4>' + (i18n['processor.jwt.allClaims'] || 'All Claims') + '</h4>';\n    html += '<pre class=\"token-raw-claims\">' + JSON.stringify(response.claims, null, 2) + '</pre>';\n    html += '</div>';\n    $resultsContent.html(html);\n  };\n\n  // Function to display invalid token details (now private)\n  var _displayInvalidToken = function _displayInvalidToken(response, $resultsContentFromCaller, i18nFromCaller) {\n    // Ensure we're using the passed $resultsContent and i18n if available,\n    // otherwise fallback to the ones in the broader scope (though less ideal)\n    var $targetContent = $resultsContentFromCaller || $resultsContent;\n    var i18nToUse = i18nFromCaller || i18n;\n    displayUiError($targetContent, {\n      responseJSON: response\n    }, i18nToUse, 'processor.jwt.tokenInvalid');\n  };\n  $resultsContent.html('<div class=\"token-instructions\">' + (i18n['processor.jwt.initialInstructions'] || 'Enter a JWT token above and click \"Verify Token\" ' +\n  // Break string\n  'to validate it.') + '</div>');\n  if (typeof callback === 'function') {\n    // The 'validate' function is part of the contract expected by nfCommon.registerComponentValidation (or similar mechanisms).\n    // Currently, this component does not implement specific validation logic via this callback,\n    // so it defaults to true. Validation might be handled internally or not be required for this component's lifecycle.\n    callback({\n      validate: function validate() {\n        return true;\n      }\n    });\n  }\n};\n\n// --- Refactored Private Helper Functions ---\n\nvar _resetUIAndShowLoading = function _resetUIAndShowLoading($resultsContent, i18n) {\n  $resultsContent.html('<div class=\"token-loading\"><span class=\"fa fa-spinner fa-spin\"></span> ' + (i18n['processor.jwt.verifying'] || 'Verifying token...') + '</div>');\n};\nvar _handleTokenVerificationResponse = function _handleTokenVerificationResponse(responseData, $resultsContent, i18n, displayValidTokenFunc, displayInvalidTokenFunc) {\n  if (responseData.valid) {\n    displayValidTokenFunc(responseData, false); // isSimulated is false for actual responses\n  } else {\n    // Pass $resultsContent and i18n to _displayInvalidToken\n    displayInvalidTokenFunc(responseData, $resultsContent, i18n);\n  }\n};\nvar _handleTokenVerificationAjaxError = function _handleTokenVerificationAjaxError(jqXHR, $resultsContent, i18n, displayValidTokenFunc) {\n  var errorMessage = jqXHR.statusText || jqXHR.responseText;\n  if (jqXHR.responseText) {\n    try {\n      var errorJson = JSON.parse(jqXHR.responseText);\n      if (errorJson && errorJson.message) {\n        errorMessage = errorJson.message;\n      }\n    } catch (e) {\n      errorMessage = jqXHR.responseText || errorMessage;\n    }\n  }\n  var messageToDisplay;\n  var isNullOrUndefined = errorMessage == null;\n  var trimmedMsg = isNullOrUndefined ? '' : String(errorMessage).trim();\n  var lowerCaseMsg = isNullOrUndefined ? '' : String(errorMessage).toLowerCase();\n  if (isNullOrUndefined || trimmedMsg === '' || lowerCaseMsg === 'null' || lowerCaseMsg === 'undefined') {\n    messageToDisplay = i18n['processor.jwt.unknownError'] || 'Unknown error';\n  } else {\n    messageToDisplay = errorMessage;\n  }\n  messageToDisplay = messageToDisplay || i18n['processor.jwt.unknownError'] || 'Unknown error';\n  if (tokenVerifier_getIsLocalhost()) {\n    var expirationDate = new Date(Date.now() + 3600000).toISOString();\n    var sampleResponse = {\n      valid: true,\n      subject: 'user123',\n      issuer: 'https://sample-issuer.example.com',\n      audience: 'sample-audience',\n      expiration:\n      // Break before value\n      expirationDate,\n      roles: ['admin', 'user'],\n      scopes: ['read', 'write'],\n      claims: {\n        sub: 'user123',\n        iss: 'https://sample-issuer.example.com',\n        aud: 'sample-audience',\n        exp: Math.floor(Date.now() / 1000) + 3600,\n        iat: Math.floor(Date.now() / 1000),\n        roles: ['admin', 'user'],\n        scope: 'read write',\n        name: 'John Doe',\n        email: 'john.doe@example.com'\n      }\n    };\n    displayValidTokenFunc(sampleResponse, true); // isSimulated is true\n  } else {\n    displayUiError($resultsContent, jqXHR, i18n, 'processor.jwt.verificationError');\n  }\n};\nvar _handleTokenVerificationSyncException = function _handleTokenVerificationSyncException(exception, $resultsContent, i18n, displayValidTokenFunc) {\n  var messageIsNullOrUndefined = exception.message == null;\n  var trimmedMessage = messageIsNullOrUndefined ? '' : String(exception.message).trim();\n  var lowerCaseMessage = messageIsNullOrUndefined ? '' : String(exception.message).toLowerCase();\n  var messageIsEmptyString = trimmedMessage === '';\n  var messageIsStringNull = lowerCaseMessage === 'null';\n  var messageIsStringUndefined = lowerCaseMessage === 'undefined';\n  var isProblematicMessage = messageIsNullOrUndefined || messageIsEmptyString || messageIsStringNull || messageIsStringUndefined;\n  var exceptionMessage = isProblematicMessage ? i18n['processor.jwt.unknownError'] || 'Exception occurred' : exception.message;\n  if (tokenVerifier_getIsLocalhost()) {\n    var expirationDateSync = new Date(Date.now() + 3600000).toISOString();\n    var sampleResponse = {\n      valid: true,\n      subject: 'user123',\n      issuer: 'https://sample-issuer.example.com',\n      audience: 'sample-audience',\n      expiration:\n      // Break before value\n      expirationDateSync,\n      roles: ['admin', 'user'],\n      scopes: ['read', 'write'],\n      claims: {\n        sub: 'user123',\n        iss: 'https://sample-issuer.example.com',\n        aud: 'sample-audience',\n        exp: Math.floor(Date.now() / 1000) + 3600,\n        iat: Math.floor(Date.now() / 1000),\n        roles: ['admin', 'user'],\n        scope: 'read write',\n        name: 'John Doe',\n        email: 'john.doe@example.com'\n      }\n    };\n    displayValidTokenFunc(sampleResponse, true); // isSimulated is true\n  } else {\n    displayUiError($resultsContent, exception, i18n, 'processor.jwt.verificationError');\n  }\n};\nvar __setIsLocalhostForTesting = function __setIsLocalhostForTesting(value) {\n  isLocalhostOverride = value === null ? null : !!value;\n};\n;// ./src/main/webapp/js/services/apiClient.js\n/**\n * API Client for JWT Token Validation.\n * Provides methods for interacting with the backend REST API.\n */\n\n'use strict';\n\n/**\n * Creates a simplified error object from a jqXHR object.\n * @param {object} jqXHR - The jQuery XHR object from an AJAX error.\n * @param {string} [textStatus] - The status text (e.g., \"timeout\", \"error\"). (Optional, as cash-dom might not always provide it directly in catch)\n * @param {string} [errorThrown] - The error thrown. (Optional, as cash-dom might not always provide it directly in catch)\n * @returns {{responseText: *, status: *, statusText: *}}\n * @private\n */\nvar _createXhrErrorObject = function _createXhrErrorObject(jqXHR, textStatus, errorThrown) {\n  // Note: cash-dom's jqXHR object in .catch() might be simpler than jQuery's.\n  // It directly provides status, statusText, and responseText.\n  // textStatus and errorThrown might not be consistently provided by cash-dom's AJAX fail handler,\n  // so we primarily rely on properties of the jqXHR object itself.\n  return {\n    status: jqXHR.status,\n    statusText: jqXHR.statusText || errorThrown || textStatus || 'Unknown error',\n    // Prioritize jqXHR.statusText\n    responseText: jqXHR.responseText\n  };\n};\n\n/**\n     * Base URL for API endpoints.\n     */\nvar BASE_URL = '../nifi-api/processors/jwt';\n\n/**\n * Validates a JWKS URL.\n *\n * @param {string} jwksUrl - The JWKS URL to validate\n * @return {Promise} A Promise object for the request\n */\nvar validateJwksUrl = function validateJwksUrl(jwksUrl) {\n  return new Promise(function (resolve, reject) {\n    $.ajax({\n      method: 'POST',\n      url: BASE_URL + '/validate-jwks-url',\n      data: JSON.stringify({\n        jwksUrl: jwksUrl\n      }),\n      contentType: 'application/json',\n      dataType: 'json',\n      timeout: 5000\n    }).then(function (data) {\n      // $.ajax().then() provides data directly\n      resolve(data);\n    })[\"catch\"](function (error) {\n      // cash-dom's ajax().catch() provides the jqXHR object\n      // Create a simplified error object from jqXHR for consistent error handling upstream.\n      reject(_createXhrErrorObject(error));\n    });\n  });\n};\n\n/**\n * Validates a JWKS file.\n *\n * @param {string} filePath - The path to the JWKS file\n * @return {Promise} A Promise object for the request\n */\nvar validateJwksFile = function validateJwksFile(filePath) {\n  return new Promise(function (resolve, reject) {\n    $.ajax({\n      method: 'POST',\n      url: BASE_URL + '/validate-jwks-file',\n      data: JSON.stringify({\n        filePath: filePath\n      }),\n      contentType: 'application/json',\n      dataType: 'json',\n      timeout: 5000\n    }).then(function (data) {\n      resolve(data);\n    })[\"catch\"](function (error) {\n      // cash-dom's ajax().catch() provides the jqXHR object\n      // Create a simplified error object from jqXHR for consistent error handling upstream.\n      reject(_createXhrErrorObject(error));\n    });\n  });\n};\n\n/**\n * Validates JWKS content.\n *\n * @param {string} jwksContent - The JWKS content to validate\n * @param {Function} successCallback - The callback to invoke on success\n * @param {Function} errorCallback - The callback to invoke on error\n */\nvar validateJwksContent = function validateJwksContent(jwksContent, successCallback, errorCallback) {\n  $.ajax({\n    method: 'POST',\n    url: BASE_URL + '/validate-jwks-content',\n    data: JSON.stringify({\n      jwksContent: jwksContent\n    }),\n    contentType: 'application/json',\n    dataType: 'json',\n    timeout: 5000\n  }).then(function (data) {\n    if (successCallback) {\n      successCallback(data);\n    }\n  })[\"catch\"](function (error) {\n    // cash-dom's ajax().catch() provides the jqXHR object\n    if (errorCallback) {\n      // Create a simplified error object from jqXHR for consistent error handling upstream.\n      var errorObj = _createXhrErrorObject(error);\n      var errorMessage = errorObj.statusText || errorObj.responseText || 'Unknown error';\n      errorCallback(errorMessage, errorObj);\n    }\n  });\n};\n\n/**\n * Verifies a JWT token.\n *\n * @param {string} token - The JWT token to verify\n * @param {Function} successCallback - The callback to invoke on success\n * @param {Function} errorCallback - The callback to invoke on error\n */\nvar verifyToken = function verifyToken(token, successCallback, errorCallback) {\n  $.ajax({\n    method: 'POST',\n    url: BASE_URL + '/verify-token',\n    data: JSON.stringify({\n      token: token\n    }),\n    contentType: 'application/json',\n    dataType: 'json',\n    timeout: 5000\n  }).then(function (data) {\n    if (successCallback) {\n      successCallback(data);\n    }\n  })[\"catch\"](function (error) {\n    // cash-dom's ajax().catch() provides the jqXHR object\n    if (errorCallback) {\n      // Create a simplified error object from jqXHR for consistent error handling upstream.\n      var errorObj = _createXhrErrorObject(error);\n      var errorMessage = errorObj.statusText || errorObj.responseText || 'Unknown error';\n      errorCallback(errorMessage, errorObj);\n    }\n  });\n};\n\n/**\n * Gets security metrics.\n *\n * @param {Function} successCallback - The callback to invoke on success\n * @param {Function} errorCallback - The callback to invoke on error\n */\nvar getSecurityMetrics = function getSecurityMetrics(successCallback, errorCallback) {\n  $.ajax({\n    method: 'GET',\n    url: BASE_URL + '/metrics',\n    dataType: 'json',\n    timeout: 5000\n  }).then(function (data) {\n    if (successCallback) {\n      successCallback(data);\n    }\n  })[\"catch\"](function (error) {\n    // cash-dom's ajax().catch() provides the jqXHR object\n    if (errorCallback) {\n      // Create a simplified error object from jqXHR for consistent error handling upstream.\n      var errorObj = _createXhrErrorObject(error);\n      var errorMessage = errorObj.statusText || errorObj.responseText || 'Unknown error';\n      errorCallback(errorMessage, errorObj);\n    }\n  });\n};\n\n/**\n * Gets processor properties.\n *\n * @param {string} processorId - The ID of the processor\n * @return {Promise} A Promise object for the request\n */\nvar getProcessorProperties = function getProcessorProperties(processorId) {\n  return external_cash_default().ajax({\n    method: 'GET',\n    url: '../nifi-api/processors/' + processorId,\n    dataType: 'json',\n    timeout: 5000\n  });\n  // $.ajax returns a promise-like object.\n  // The .then callback will receive the parsed JSON data directly.\n  // The .catch callback will receive the jqXHR object.\n};\n\n/**\n * Updates processor properties.\n *\n * @param {string} processorId - The ID of the processor\n * @param {Object} properties - The properties to update\n * @return {Promise} A Promise object for the request\n */\nvar updateProcessorProperties = function updateProcessorProperties(processorId, properties) {\n  // First, get the current processor configuration\n  return external_cash_default().ajax({\n    method: 'GET',\n    url: '../nifi-api/processors/' + processorId,\n    dataType: 'json',\n    timeout: 5000\n  }).then(function (processor) {\n    // data from GET is the processor object\n    // Create the update request\n    var updateRequest = {\n      revision: processor.revision,\n      component: {\n        id: processorId,\n        properties: properties\n      }\n    };\n\n    // Send the update request\n    return external_cash_default().ajax({\n      method: 'PUT',\n      url: '../nifi-api/processors/' + processorId,\n      data: JSON.stringify(updateRequest),\n      contentType: 'application/json',\n      dataType: 'json',\n      timeout: 5000\n    });\n  });\n};\n;// ./src/main/webapp/js/components/issuerConfigEditor.js\nfunction _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = \"function\" == typeof Symbol ? Symbol : {}, n = r.iterator || \"@@iterator\", o = r.toStringTag || \"@@toStringTag\"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, \"_invoke\", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (c = i[4] || 3, u = i[5] === e ? i[3] : i[5], i[4] = 3, i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError(\"Generator is already running\"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = \"next\"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError(\"iterator result is not an object\"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i[\"return\"]) && t.call(i), c < 2 && (u = TypeError(\"The iterator does not provide a '\" + o + \"' method\"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, \"GeneratorFunction\")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, \"constructor\", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = \"GeneratorFunction\", _regeneratorDefine2(GeneratorFunctionPrototype, o, \"GeneratorFunction\"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, \"Generator\"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, \"toString\", function () { return \"[object Generator]\"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }\nfunction _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, \"\", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o(\"next\", 0), o(\"throw\", 1), o(\"return\", 2); } }, _regeneratorDefine2(e, r, n, t); }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n/**\n * Custom UI component for configuring IssuerConfig properties.\n * This component provides a user-friendly interface for creating and managing\n * issuer configurations for the MultiIssuerJWTTokenAuthenticator processor.\n */\n\n\n\n\n'use strict';\n\n// Get i18n resources from NiFi Common\nvar i18n = nf_common.getI18n() || {};\n\n// No global state - processorId is passed as parameter where needed\n\n/**\n * Returns a predefined sample issuer configuration object.\n * This is used for demonstration or as a default when loading fails.\n * @returns {{name: string, properties: object}}\n */\nvar _getSampleIssuerConfig = function _getSampleIssuerConfig() {\n  return {\n    name: 'sample-issuer',\n    properties: {\n      'issuer': 'https://sample-issuer.example.com',\n      'jwks-url': 'https://sample-issuer.example.com/.well-known/jwks.json',\n      'audience': 'sample-audience',\n      'client-id': 'sample-client'\n    }\n  };\n};\n\n/**\n * Creates a success message span with consistent styling.\n * @param {string} message - The success message text\n * @returns {string} HTML string with success message styling\n */\nvar _createSuccessMessage = function _createSuccessMessage(message) {\n  return \"<span class=\\\"success-message\\\">\".concat(message, \"</span>\");\n};\n\n/**\n * Creates a JWKS validation success message.\n * @param {number} keyCount - Number of keys found\n * @param {boolean} isSimulated - Whether this is a simulated response\n * @returns {string} HTML string for JWKS validation success\n */\nvar _createJwksSuccessMessage = function _createJwksSuccessMessage(keyCount) {\n  var isSimulated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var okText = i18n['processor.jwt.ok'] || 'OK';\n  var validJwksText = i18n['processor.jwt.validJwks'] || 'Valid JWKS';\n  var keysFoundText = i18n['processor.jwt.keysFound'] || 'keys found';\n  var simulatedText = isSimulated ? ' <em>(Simulated response)</em>' : '';\n  return \"\".concat(_createSuccessMessage(okText), \" \").concat(validJwksText, \" (\").concat(keyCount, \" \").concat(keysFoundText, \")\").concat(simulatedText);\n};\n\n/**\n * Parses processor properties and groups them by issuer name.\n * Extracts properties that start with 'issuer.' and groups them by issuer name.\n *\n * @param {object} properties - Raw processor properties object\n * @returns {object} Object with issuer names as keys and their properties as values\n */\nvar _parseIssuerProperties = function _parseIssuerProperties(properties) {\n  var issuerProperties = {};\n  Object.keys(properties).forEach(function (key) {\n    if (key.startsWith('issuer.')) {\n      var parts = key.substring(7).split('.');\n      if (parts.length === 2) {\n        var issuerName = parts[0];\n        var propertyName = parts[1];\n        if (!issuerProperties[issuerName]) {\n          issuerProperties[issuerName] = {};\n        }\n        issuerProperties[issuerName][propertyName] = properties[key];\n      }\n    }\n  });\n  return issuerProperties;\n};\n\n/**\n * Extracts and trims the value from a DOM element array (cash-dom result).\n * Safely handles cases where the element array is empty or undefined.\n *\n * @param {Array} elementArray - Array-like object from cash-dom find() result\n * @returns {string} Trimmed value or empty string if element not found\n */\nvar _extractFieldValue = function _extractFieldValue(elementArray) {\n  return elementArray && elementArray[0] && elementArray[0].value ? elementArray[0].value.trim() : '';\n};\n\n/**\n * Extracts form field values from a cash-dom form object.\n * Uses consistent field extraction pattern for all issuer configuration fields.\n *\n * @param {object} $form - Cash-dom wrapped form element\n * @returns {object} Object containing all form field values\n */\nvar _extractFormFields = function _extractFormFields($form) {\n  return {\n    issuerName: _extractFieldValue($form.find('.issuer-name')),\n    issuer: _extractFieldValue($form.find('.field-issuer')),\n    'jwks-url': _extractFieldValue($form.find('.field-jwks-url')),\n    audience: _extractFieldValue($form.find('.field-audience')),\n    'client-id': _extractFieldValue($form.find('.field-client-id'))\n  };\n};\n\n/**\n * Finds the global error container for displaying removal errors.\n * @returns {cash|null} The global error container or null if not found\n */\nvar _findGlobalErrorContainer = function _findGlobalErrorContainer() {\n  var $globalError = external_cash_default()('.global-error-messages');\n  return $globalError.length > 0 ? $globalError : null;\n};\n\n/**\n * Creates the basic DOM structure for the issuer config editor.\n * @param {object} $parentElement The cash-dom wrapped parent element to append the editor to.\n * @returns {{$container: object, $issuersContainer: object, $globalErrorContainer: object}} Cash-dom wrapped elements.\n */\nvar _createEditorStructure = function _createEditorStructure($parentElement) {\n  var $container = external_cash_default()('<div class=\"issuer-config-editor\"></div>');\n  $parentElement.append($container);\n  var $title = external_cash_default()('<h3>Issuer Configurations</h3>');\n  $container.append($title);\n  var $description = external_cash_default()('<p>Configure JWT issuers for token validation. Each issuer requires a name and properties like jwks-url and issuer URI.</p>');\n  $container.append($description);\n\n  // Add a global error display area\n  var $globalErrorContainer = external_cash_default()('<div class=\"global-error-messages issuer-form-error-messages\" style=\"display: none;\"></div>');\n  $container.append($globalErrorContainer);\n  var $issuersContainer = external_cash_default()('<div class=\"issuers-container\"></div>');\n  $container.append($issuersContainer);\n  return {\n    $container: $container,\n    $issuersContainer: $issuersContainer,\n    $globalErrorContainer: $globalErrorContainer\n  };\n};\n\n/**\n * Sets up the \"Add Issuer\" button and its event listener.\n * @param {object} $container The cash-dom wrapped main container element for the editor.\n * @param {object} $issuersContainer The cash-dom wrapped container where issuer forms will be added.\n * @param {string} [processorId] The processor ID for server mode operations.\n */\nvar _setupAddIssuerButton = function _setupAddIssuerButton($container, $issuersContainer) {\n  var processorId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var $addButton = external_cash_default()('<button class=\"add-issuer-button\">Add Issuer</button>');\n  $container.append($addButton);\n  $addButton.on('click', function () {\n    var sampleConfig = _getSampleIssuerConfig();\n    addIssuerForm($issuersContainer, sampleConfig.name + '-' + Date.now(), sampleConfig.properties, processorId);\n  });\n};\n\n/**\n * Initializes editor data, including loading existing issuers for the given processor.\n * @param {string} effectiveUrl The URL used to determine the processor ID.\n * @param {object} $issuersContainer The cash-dom wrapped container where issuer forms are managed.\n */\nvar _initializeEditorData = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(effectiveUrl, $issuersContainer) {\n    var processorId;\n    return _regenerator().w(function (_context) {\n      while (1) switch (_context.n) {\n        case 0:\n          processorId = getProcessorIdFromUrl(effectiveUrl);\n          _context.n = 1;\n          return loadExistingIssuers($issuersContainer, processorId);\n        case 1:\n          return _context.a(2);\n      }\n    }, _callee);\n  }));\n  return function _initializeEditorData(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n/**\n     * Initializes the component.\n     *\n     * @param {object} element - The DOM element to initialize in\n     * @param {string} effectiveUrl - The URL to derive processorId from\n     */\nvar initComponent = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(element, effectiveUrl) {\n    var $element, processorId, _createEditorStructur, $container, $issuersContainer, $globalErrorContainer;\n    return _regenerator().w(function (_context2) {\n      while (1) switch (_context2.n) {\n        case 0:\n          $element = external_cash_default()(element);\n          processorId = getProcessorIdFromUrl(effectiveUrl);\n          _createEditorStructur = _createEditorStructure($element), $container = _createEditorStructur.$container, $issuersContainer = _createEditorStructur.$issuersContainer, $globalErrorContainer = _createEditorStructur.$globalErrorContainer;\n          _setupAddIssuerButton($container, $issuersContainer, processorId);\n          _context2.n = 1;\n          return _initializeEditorData(effectiveUrl, $issuersContainer);\n        case 1:\n          return _context2.a(2);\n      }\n    }, _callee2);\n  }));\n  return function initComponent(_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\n/**\n     * Gets the processor ID from the URL.\n     *\n     * @return {string} The processor ID\n     */\nvar getProcessorIdFromUrl = function getProcessorIdFromUrl(urlToParse) {\n  if (typeof urlToParse !== 'string') {\n    return '';\n  }\n  var match = urlToParse.match(/\\/processors\\/([a-f0-9-]+)/);\n  return match ? match[1] : '';\n};\n\n/**\n     * Loads existing issuer configurations.\n     *\n     * @param {object} $container - The cash-dom wrapped container element\n     * @param {string} processorId - The processor ID to load configurations for\n     */\nvar loadExistingIssuers = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3($container, processorId) {\n    var sampleConfig, response, properties, issuerProperties, _sampleConfig, _t;\n    return _regenerator().w(function (_context3) {\n      while (1) switch (_context3.n) {\n        case 0:\n          if (processorId) {\n            _context3.n = 1;\n            break;\n          }\n          sampleConfig = _getSampleIssuerConfig();\n          addIssuerForm($container, sampleConfig.name, sampleConfig.properties, processorId);\n          return _context3.a(2);\n        case 1:\n          _context3.p = 1;\n          _context3.n = 2;\n          return getProcessorProperties(processorId);\n        case 2:\n          response = _context3.v;\n          // Extract and parse issuer properties using utility function\n          properties = response.properties || {};\n          issuerProperties = _parseIssuerProperties(properties); // Create issuer forms for each issuer\n          Object.keys(issuerProperties).forEach(function (issuerName) {\n            addIssuerForm($container, issuerName, issuerProperties[issuerName], processorId);\n          });\n          _context3.n = 4;\n          break;\n        case 3:\n          _context3.p = 3;\n          _t = _context3.v;\n          // Fallback to sample configuration on any error\n          _sampleConfig = _getSampleIssuerConfig();\n          addIssuerForm($container, _sampleConfig.name, _sampleConfig.properties, processorId);\n        case 4:\n          return _context3.a(2);\n      }\n    }, _callee3, null, [[1, 3]]);\n  }));\n  return function loadExistingIssuers(_x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\n/**\n     * Adds a new issuer form.\n     *\n     * @param {object} container - The container element\n     * @param {string} [issuerName] - The issuer name (for existing issuers)\n     * @param {object} [properties] - The issuer properties (for existing issuers)\n     */\n/**\n * Creates the header section for an issuer form, including name input and remove button.\n * @param {string} [issuerName] - The initial name of the issuer, if any.\n * @param {function} onRemove - Callback function when the remove button is clicked.\n * @returns {cash} The header element.\n */\nvar _createFormHeader = function _createFormHeader(issuerName, onRemove) {\n  var $formHeader = external_cash_default()('<div class=\"form-header\"></div>');\n  var $nameLabel = external_cash_default()('<label>Issuer Name:</label>');\n  $formHeader.append($nameLabel);\n  var $nameInput = external_cash_default()('<input type=\"text\" class=\"issuer-name\" placeholder=\"e.g., keycloak\">');\n  $nameLabel.append($nameInput);\n  if (issuerName) {\n    $nameInput.val(issuerName);\n  }\n  var $removeButton = external_cash_default()('<button class=\"remove-issuer-button\">Remove</button>');\n  $formHeader.append($removeButton);\n  $removeButton.on('click', function () {\n    // Pass $nameInput.val() at the time of click\n    onRemove($nameInput.val());\n  });\n  return $formHeader;\n};\n\n/**\n * Creates the button wrapper and result container for JWKS validation.\n * @returns {{$testButtonWrapper: object, $testButton: object, $resultContainer: object}}\n */\nvar _createJwksButtonElements = function _createJwksButtonElements() {\n  var $testButtonWrapper = external_cash_default()('<div class=\"jwks-button-wrapper\"></div>');\n  var $testButton = external_cash_default()('<button type=\"button\" class=\"verify-jwks-button\">Test Connection</button>');\n  var initialResultText = \"<em>\".concat(i18n['jwksValidator.initialInstructions'] || 'Click the button to validate JWKS', \"</em>\");\n  var $resultContainer = external_cash_default()('<div class=\"verification-result\"></div>');\n  $resultContainer.html(initialResultText);\n  $testButtonWrapper.append($testButton).append($resultContainer);\n  return {\n    $testButtonWrapper: $testButtonWrapper,\n    $testButton: $testButton,\n    $resultContainer: $resultContainer\n  };\n};\n\n/**\n * Positions the JWKS test button relative to the JWKS URL field.\n * @param {object} $formFieldsContainer - The form fields container\n * @param {object} $testButtonWrapper - The button wrapper element\n */\nvar _positionJwksTestButton = function _positionJwksTestButton($formFieldsContainer, $testButtonWrapper) {\n  var $jwksUrlFieldContainer = $formFieldsContainer.find('.field-jwks-url').closest('.form-field');\n  if ($jwksUrlFieldContainer.length) {\n    $jwksUrlFieldContainer.after($testButtonWrapper);\n  } else {\n    // Fallback: append to container if specific field not found\n    $formFieldsContainer.append($testButtonWrapper);\n  }\n};\n\n/**\n * Handles JWKS validation response based on environment and response data.\n * @param {object} $resultContainer - The result display container\n * @param {object} responseData - The AJAX response data\n */\nvar _handleJwksValidationResponse = function _handleJwksValidationResponse($resultContainer, responseData) {\n  if (responseData.valid) {\n    $resultContainer.html(_createJwksSuccessMessage(responseData.keyCount));\n  } else {\n    displayUiError($resultContainer, {\n      responseJSON: responseData\n    }, i18n, 'processor.jwt.invalidJwks');\n  }\n};\n\n/**\n * Handles JWKS validation errors based on environment.\n * @param {object} $resultContainer - The result display container\n * @param {object} error - The error object\n * @param {boolean} isAjaxError - Whether this is an AJAX error vs synchronous error\n */\nvar _handleJwksValidationError = function _handleJwksValidationError($resultContainer, error) {\n  var isAjaxError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  // eslint-disable-next-line no-undef\n  if (getIsLocalhost()) {\n    var simulatedMessage = isAjaxError ? _createJwksSuccessMessage(3, true) : _createJwksSuccessMessage(3, true) + ' <em>(Simulated error path response)</em>';\n    $resultContainer.html(simulatedMessage);\n  } else {\n    displayUiError($resultContainer, error, i18n, 'processor.jwt.validationError');\n  }\n};\n\n/**\n * Performs the JWKS URL validation via AJAX.\n * @param {string} jwksValue - The JWKS URL to validate\n * @param {object} $resultContainer - The result display container\n */\nvar _performJwksValidation = function _performJwksValidation(jwksValue, $resultContainer) {\n  try {\n    external_cash_default().ajax({\n      method: 'POST',\n      url: '../nifi-api/processors/jwks/validate-url',\n      data: JSON.stringify({\n        jwksValue: jwksValue\n      }),\n      contentType: 'application/json',\n      dataType: 'json',\n      timeout: 5000\n    }).then(function (responseData) {\n      return _handleJwksValidationResponse($resultContainer, responseData);\n    })[\"catch\"](function (jqXHR) {\n      return _handleJwksValidationError($resultContainer, jqXHR, true);\n    });\n  } catch (e) {\n    _handleJwksValidationError($resultContainer, e, false);\n  }\n};\n\n/**\n * Creates and configures the \"Test Connection\" button for JWKS URL validation.\n * @param {cash} $formFieldsContainer - The jQuery-wrapped container for form fields where the button will be appended or inserted after.\n * @param {function} getJwksUrlValue - A function that returns the current value of the JWKS URL input field.\n */\nvar _createJwksTestConnectionButton = function _createJwksTestConnectionButton($formFieldsContainer, getJwksUrlValue) {\n  var _createJwksButtonElem = _createJwksButtonElements(),\n    $testButtonWrapper = _createJwksButtonElem.$testButtonWrapper,\n    $testButton = _createJwksButtonElem.$testButton,\n    $resultContainer = _createJwksButtonElem.$resultContainer;\n  _positionJwksTestButton($formFieldsContainer, $testButtonWrapper);\n  $testButton.on('click', function () {\n    $resultContainer.html(i18n['processor.jwt.testing'] || 'Testing...');\n    var jwksValue = getJwksUrlValue();\n    _performJwksValidation(jwksValue, $resultContainer);\n  });\n};\n\n/**\n * Creates the save button for an issuer form.\n * @param {object} $issuerForm - The cash-dom wrapped issuer form element.\n * @param {string} [processorId] - The processor ID for server mode saves\n */\nvar _createSaveButton = function _createSaveButton($issuerForm) {\n  var processorId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var $saveButton = external_cash_default()('<button class=\"save-issuer-button\">Save Issuer</button>');\n  var $formErrorContainer = external_cash_default()('<div class=\"issuer-form-error-messages\"></div>');\n  $saveButton.on('click', function () {\n    $formErrorContainer.empty();\n    saveIssuer($issuerForm[0], $formErrorContainer, processorId);\n  });\n  $issuerForm.append($formErrorContainer);\n  return $saveButton;\n};\n\n/**\n * Creates and populates the form fields for an issuer form.\n * @param {object} $formFields - The cash-dom wrapped form fields container\n * @param {object} [properties] - The issuer properties for pre-population\n */\nvar _populateIssuerFormFields = function _populateIssuerFormFields($formFields, properties) {\n  // Add standard form fields\n  addFormField($formFields, 'issuer', 'Issuer URI', 'The URI of the token issuer (must match the iss claim)', properties ? properties.issuer : '');\n  addFormField($formFields, 'jwks-url', 'JWKS URL', 'The URL of the JWKS endpoint', properties ? properties['jwks-url'] : '');\n\n  // Add JWKS Test Connection button\n  _createJwksTestConnectionButton($formFields, function () {\n    var $jwksInput = $formFields.find('.field-jwks-url');\n    return $jwksInput.length ? $jwksInput.val() : '';\n  });\n  addFormField($formFields, 'audience', 'Audience', 'The expected audience claim value', properties ? properties.audience : '');\n  addFormField($formFields, 'client-id', 'Client ID', 'The client ID for token validation', properties ? properties['client-id'] : '');\n};\n\n/**\n * Creates the complete issuer form structure with header, fields, and save button.\n * @param {string} [issuerName] - The issuer name for pre-population\n * @param {object} [properties] - The issuer properties for pre-population\n * @param {string} [processorId] - The processor ID for server mode operations\n * @returns {object} The constructed cash-dom wrapped issuer form element\n */\nvar _createCompleteIssuerForm = function _createCompleteIssuerForm(issuerName, properties) {\n  var processorId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var $issuerForm = external_cash_default()('<div class=\"issuer-form\"></div>');\n\n  // Create and append form header\n  var $formHeader = _createFormHeader(issuerName, function (clickedIssuerNameVal) {\n    removeIssuer($issuerForm[0], clickedIssuerNameVal);\n  });\n  $issuerForm.append($formHeader);\n\n  // Create form fields container\n  var $formFields = external_cash_default()('<div class=\"form-fields\"></div>');\n  $issuerForm.append($formFields);\n\n  // Populate form fields\n  _populateIssuerFormFields($formFields, properties);\n\n  // Create and append save button\n  var $saveButton = _createSaveButton($issuerForm, processorId);\n  $issuerForm.append($saveButton);\n  return $issuerForm;\n};\n\n/**\n     * Adds a new issuer form.\n     *\n     * @param {object} $container - The cash-dom wrapped container element\n     * @param {string} [issuerName] - The issuer name (for existing issuers)\n     * @param {object} [properties] - The issuer properties (for existing issuers)\n     * @param {string} [processorId] - The processor ID for server mode operations\n     */\nvar addIssuerForm = function addIssuerForm($container, issuerName, properties) {\n  var processorId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  var $issuerForm = _createCompleteIssuerForm(issuerName, properties, processorId);\n  $container.append($issuerForm);\n};\n\n/**\n     * Adds a form field.\n     *\n     * @param {object} $container - The cash-dom wrapped container element\n     * @param {string} name - The field name\n     * @param {string} label - The field label\n     * @param {string} description - The field description\n     * @param {string} [value] - The field value\n     */\nvar addFormField = function addFormField($container, name, label, description, value) {\n  var $fieldContainer = external_cash_default()('<div class=\"form-field\"></div>');\n  $container.append($fieldContainer);\n\n  // Add label\n  var $fieldLabel = external_cash_default()('<label></label>').text(label + ':');\n  $fieldContainer.append($fieldLabel);\n\n  // Add input\n  var $input = external_cash_default()('<input type=\"text\" class=\"field-' + name + '\" placeholder=\"' + description + '\">');\n  // Appending input to label is not standard for forms, usually input is sibling to label or inside a container with label.\n  // For this refactor, I will keep the structure as implied by original code: input inside label.\n  // However, a better structure would be $fieldLabel.text(label + ':'); $fieldContainer.append($input);\n  // To maintain current structure where input is not a child of label, but of fieldContainer:\n  $fieldContainer.append($input);\n\n  // Set value if provided\n  if (value) {\n    $input.val(value);\n  }\n\n  // Add description\n  var $descElement = external_cash_default()('<div class=\"field-description\"></div>').text(description);\n  $fieldContainer.append($descElement);\n};\n\n/**\n * Validates issuer form data and returns validation results.\n * @param {object} formFields - The extracted form field values\n * @returns {{isValid: boolean, error?: Error}} Validation result\n */\nvar _validateIssuerFormData = function _validateIssuerFormData(formFields) {\n  var issuerName = formFields.issuerName;\n\n  // Validate issuer name\n  if (!issuerName) {\n    return {\n      isValid: false,\n      error: new Error(i18n['issuerConfigEditor.error.issuerNameRequired'] || 'Issuer name is required.')\n    };\n  }\n  var properties = {\n    issuer: formFields.issuer,\n    'jwks-url': formFields['jwks-url'],\n    audience: formFields.audience,\n    'client-id': formFields['client-id']\n  };\n\n  // Validate required properties\n  if (!properties.issuer || !properties['jwks-url']) {\n    return {\n      isValid: false,\n      error: new Error(i18n['issuerConfigEditor.error.requiredFields'] || 'Issuer URI and JWKS URL are required.')\n    };\n  }\n  return {\n    isValid: true\n  };\n};\n\n/**\n * Creates processor property updates from issuer form data.\n * @param {string} issuerName - The issuer name\n * @param {object} formFields - The extracted form field values\n * @returns {object} The property updates object\n */\nvar _createPropertyUpdates = function _createPropertyUpdates(issuerName, formFields) {\n  var properties = {\n    issuer: formFields.issuer,\n    'jwks-url': formFields['jwks-url'],\n    audience: formFields.audience,\n    'client-id': formFields['client-id']\n  };\n  var updates = {};\n  Object.keys(properties).forEach(function (key) {\n    if (properties[key]) {\n      updates[\"issuer.\".concat(issuerName, \".\").concat(key)] = properties[key];\n    }\n  });\n  return updates;\n};\n\n/**\n * Handles the server-side save operation for issuer configuration.\n * @param {string} processorId - The processor ID to save to\n * @param {string} issuerName - The issuer name\n * @param {object} updates - The property updates\n * @param {object} $errorContainer - The error display container\n */\nvar _saveIssuerToServer = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(processorId, issuerName, updates, $errorContainer) {\n    var _t2;\n    return _regenerator().w(function (_context4) {\n      while (1) switch (_context4.n) {\n        case 0:\n          _context4.p = 0;\n          _context4.n = 1;\n          return updateProcessorProperties(processorId, updates);\n        case 1:\n          $errorContainer.html(_createSuccessMessage(i18n['issuerConfigEditor.success.saved'] || 'Issuer configuration saved successfully.'));\n          setTimeout(function () {\n            return $errorContainer.empty();\n          }, 5000);\n          _context4.n = 3;\n          break;\n        case 2:\n          _context4.p = 2;\n          _t2 = _context4.v;\n          displayUiError($errorContainer, _t2, i18n, 'issuerConfigEditor.error.saveFailedTitle');\n        case 3:\n          return _context4.a(2);\n      }\n    }, _callee4, null, [[0, 2]]);\n  }));\n  return function _saveIssuerToServer(_x7, _x8, _x9, _x0) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\n/**\n * Handles the standalone mode save operation for issuer configuration.\n * @param {object} $errorContainer - The error display container\n */\nvar _saveIssuerStandalone = function _saveIssuerStandalone($errorContainer) {\n  $errorContainer.html(_createSuccessMessage(i18n['issuerConfigEditor.success.savedStandalone'] || 'Issuer configuration saved successfully (standalone mode).'));\n  setTimeout(function () {\n    return $errorContainer.empty();\n  }, 5000);\n};\n\n/**\n     * Saves an issuer configuration.\n     *\n     * @param {object} form - The issuer form\n     * @param {object} $errorContainer - The error display container\n     * @param {string} [processorId] - The processor ID (optional, for server mode)\n     */\nvar saveIssuer = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(form, $errorContainer) {\n    var processorId,\n      $form,\n      formFields,\n      validation,\n      issuerName,\n      updates,\n      _args5 = arguments;\n    return _regenerator().w(function (_context5) {\n      while (1) switch (_context5.n) {\n        case 0:\n          processorId = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : null;\n          $errorContainer.empty();\n\n          // Extract and validate form data\n          $form = external_cash_default()(form);\n          formFields = _extractFormFields($form);\n          validation = _validateIssuerFormData(formFields);\n          if (validation.isValid) {\n            _context5.n = 1;\n            break;\n          }\n          displayUiError($errorContainer, validation.error, i18n, 'issuerConfigEditor.error.title');\n          return _context5.a(2);\n        case 1:\n          issuerName = formFields.issuerName;\n          updates = _createPropertyUpdates(issuerName, formFields); // Save based on mode (server vs standalone)\n          if (!processorId) {\n            _context5.n = 3;\n            break;\n          }\n          _context5.n = 2;\n          return _saveIssuerToServer(processorId, issuerName, updates, $errorContainer);\n        case 2:\n          _context5.n = 4;\n          break;\n        case 3:\n          _saveIssuerStandalone($errorContainer);\n        case 4:\n          return _context5.a(2);\n      }\n    }, _callee5);\n  }));\n  return function saveIssuer(_x1, _x10) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\n/**\n * Creates property updates to remove all properties for a specific issuer.\n * @param {object} properties - The current processor properties\n * @param {string} issuerName - The issuer name to remove\n * @returns {object} Updates object with null values for issuer properties\n */\nvar _createRemovalUpdates = function _createRemovalUpdates(properties, issuerName) {\n  var updates = {};\n  Object.keys(properties).forEach(function (key) {\n    if (key.startsWith(\"issuer.\".concat(issuerName, \".\"))) {\n      updates[key] = null;\n    }\n  });\n  return updates;\n};\n\n/**\n * Displays removal success message in the global error container.\n * @param {object} $globalErrorContainer - The global error display container\n * @param {string} issuerName - The name of the removed issuer\n * @param {boolean} isStandalone - Whether this is standalone mode\n */\nvar _displayRemovalSuccess = function _displayRemovalSuccess($globalErrorContainer, issuerName) {\n  var isStandalone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (!$globalErrorContainer) return;\n  var message = isStandalone ? \"Issuer \\\"\".concat(issuerName, \"\\\" removed (standalone mode).\") : \"Issuer \\\"\".concat(issuerName, \"\\\" removed successfully.\");\n  $globalErrorContainer.html(_createSuccessMessage(message));\n  $globalErrorContainer.show();\n  setTimeout(function () {\n    $globalErrorContainer.empty();\n    $globalErrorContainer.hide();\n  }, 3000);\n};\n\n/**\n * Displays removal error message in the global error container.\n * @param {object} $globalErrorContainer - The global error display container\n * @param {Error|string} error - The error to display\n */\nvar _displayRemovalError = function _displayRemovalError($globalErrorContainer, error) {\n  if ($globalErrorContainer) {\n    var errorObj = typeof error === 'string' ? new Error(error) : error;\n    displayUiError($globalErrorContainer, errorObj, i18n, 'issuerConfigEditor.error.removeFailedTitle');\n    $globalErrorContainer.show();\n  } else {\n    var message = typeof error === 'string' ? error : error.message;\n    console.error('Failed to remove issuer:', message);\n  }\n};\n\n/**\n * Removes issuer properties from the server.\n * @param {string} processorId - The processor ID\n * @param {string} issuerName - The issuer name to remove\n * @param {object} $globalErrorContainer - The global error display container\n */\nvar _removeIssuerFromServer = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(processorId, issuerName, $globalErrorContainer) {\n    var response, properties, updates, _t3;\n    return _regenerator().w(function (_context6) {\n      while (1) switch (_context6.n) {\n        case 0:\n          _context6.p = 0;\n          _context6.n = 1;\n          return getProcessorProperties(processorId);\n        case 1:\n          response = _context6.v;\n          properties = response.properties || {};\n          updates = _createRemovalUpdates(properties, issuerName);\n          if (!(Object.keys(updates).length === 0 && issuerName !== 'sample-issuer')) {\n            _context6.n = 2;\n            break;\n          }\n          console.info(\"No properties found to remove for issuer: \".concat(issuerName));\n          return _context6.a(2);\n        case 2:\n          _context6.n = 3;\n          return updateProcessorProperties(processorId, updates);\n        case 3:\n          _displayRemovalSuccess($globalErrorContainer, issuerName, false);\n          _context6.n = 5;\n          break;\n        case 4:\n          _context6.p = 4;\n          _t3 = _context6.v;\n          _displayRemovalError($globalErrorContainer, _t3);\n        case 5:\n          return _context6.a(2);\n      }\n    }, _callee6, null, [[0, 4]]);\n  }));\n  return function _removeIssuerFromServer(_x11, _x12, _x13) {\n    return _ref6.apply(this, arguments);\n  };\n}();\n\n/**\n     * Removes an issuer configuration.\n     *\n     * @param {object} form - The jQuery object for the issuer form.\n     * @param {string} issuerNameFromClick - The issuer name obtained from the input field at click time.\n     */\nvar removeIssuer = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7(form, issuerNameFromClick) {\n    var currentProcessorId, currentIssuerName, $globalErrorContainer, errorMessage;\n    return _regenerator().w(function (_context7) {\n      while (1) switch (_context7.n) {\n        case 0:\n          external_cash_default()(form).remove();\n          currentProcessorId = getProcessorIdFromUrl(window.location.href);\n          currentIssuerName = issuerNameFromClick;\n          $globalErrorContainer = _findGlobalErrorContainer();\n          if (!(currentIssuerName && currentProcessorId)) {\n            _context7.n = 2;\n            break;\n          }\n          _context7.n = 1;\n          return _removeIssuerFromServer(currentProcessorId, currentIssuerName, $globalErrorContainer);\n        case 1:\n          _context7.n = 3;\n          break;\n        case 2:\n          if (currentIssuerName && !currentProcessorId) {\n            // Standalone mode: just show success message\n            _displayRemovalSuccess($globalErrorContainer, currentIssuerName, true);\n          } else {\n            // Handle missing issuer name or processor ID\n            errorMessage = !currentIssuerName ? 'Issuer name missing for removal' : 'Cannot remove issuer: no processor context found';\n            _displayRemovalError($globalErrorContainer, errorMessage);\n          }\n        case 3:\n          return _context7.a(2);\n      }\n    }, _callee7);\n  }));\n  return function removeIssuer(_x14, _x15) {\n    return _ref7.apply(this, arguments);\n  };\n}();\n\n/**\n * Initializes the component.\n *\n * @param {HTMLElement} element - The DOM element to initialize in\n * @param {Function} callback - The callback function\n * @param {string} currentTestUrlFromArg - URL for testing purposes (optional)\n */\nvar issuerConfigEditor_init = /*#__PURE__*/function () {\n  var _ref8 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8(element, callback, currentTestUrlFromArg) {\n    var effectiveUrlForInit, _t4;\n    return _regenerator().w(function (_context8) {\n      while (1) switch (_context8.n) {\n        case 0:\n          if (element) {\n            _context8.n = 1;\n            break;\n          }\n          if (typeof callback === 'function') {\n            callback();\n          }\n          return _context8.a(2);\n        case 1:\n          _context8.p = 1;\n          effectiveUrlForInit = currentTestUrlFromArg || window.location.href;\n          _context8.n = 2;\n          return initComponent(element, effectiveUrlForInit);\n        case 2:\n          // Call the callback function if provided\n          if (typeof callback === 'function') {\n            callback();\n          }\n          _context8.n = 4;\n          break;\n        case 3:\n          _context8.p = 3;\n          _t4 = _context8.v;\n          if (typeof callback === 'function') {\n            callback();\n          }\n        case 4:\n          return _context8.a(2);\n      }\n    }, _callee8, null, [[1, 3]]);\n  }));\n  return function init(_x16, _x17, _x18) {\n    return _ref8.apply(this, arguments);\n  };\n}();\n\n// Export functions for testing purposes\n/* eslint-disable-next-line camelcase */\nvar __test_exports = {\n  saveIssuer: saveIssuer,\n  removeIssuer: removeIssuer,\n  addIssuerForm: addIssuerForm,\n  addFormField: addFormField,\n  getProcessorIdFromUrl: getProcessorIdFromUrl,\n  _parseIssuerProperties: _parseIssuerProperties,\n  _extractFieldValue: _extractFieldValue,\n  _extractFormFields: _extractFormFields,\n  _validateIssuerFormData: _validateIssuerFormData,\n  _createPropertyUpdates: _createPropertyUpdates,\n  _saveIssuerToServer: _saveIssuerToServer,\n  _saveIssuerStandalone: _saveIssuerStandalone,\n  _handleJwksValidationResponse: _handleJwksValidationResponse,\n  _handleJwksValidationError: _handleJwksValidationError,\n  _performJwksValidation: _performJwksValidation\n};\n;// ./src/main/webapp/js/utils/i18n.js\n/**\n * Internationalization (i18n) module for MultiIssuerJWTTokenAuthenticator UI.\n * Provides localization support using the browser's language setting.\n */\n\n\n// Default language\nvar currentLanguage = 'en';\n\n// Available languages\nvar availableLanguages = ['en', 'de'];\n\n// Translation dictionaries\nvar translations = {\n  en: {\n    // Common\n    'common.loading': 'Loading...',\n    'common.error': 'Error',\n    'common.success': 'Success',\n    'common.save': 'Save',\n    'common.cancel': 'Cancel',\n    'common.add': 'Add',\n    'common.remove': 'Remove',\n    'common.edit': 'Edit',\n    'common.verify': 'Verify',\n    'common.details': 'Details',\n    'common.name': 'Name',\n    'common.value': 'Value',\n    'common.yes': 'Yes',\n    'common.no': 'No',\n    // JWT Validator\n    'jwt.validator.title': 'JWT Token Validator',\n    'jwt.validator.loading': 'Loading JWT Validator UI...',\n    // Token Verification\n    'token.verification.title': 'Token Verification',\n    'token.verification.input.label': 'Enter JWT Token',\n    'token.verification.button': 'Verify Token',\n    'token.verification.valid': 'Token is valid',\n    'token.verification.invalid': 'Token is invalid',\n    'token.verification.error': 'Error verifying token',\n    'token.verification.loading': 'Verifying token...',\n    'token.verification.details': 'Token Details',\n    'token.verification.claims': 'Claims',\n    'token.verification.raw': 'Raw Token',\n    // JWKS Validation\n    'jwks.validation.title': 'JWKS Validation',\n    'jwks.validation.button': 'Verify JWKS URL',\n    'jwks.validation.success': 'JWKS URL is valid',\n    'jwks.validation.error': 'JWKS URL is invalid',\n    'processor.jwt.failed': 'Failed',\n    'processor.jwt.ok': 'OK',\n    // Issuer Configuration\n    'issuer.config.title': 'Issuer Configuration',\n    'issuer.config.add': 'Add Issuer',\n    'issuer.config.remove': 'Remove Issuer',\n    'issuer.config.save': 'Save Configuration',\n    'issuer.config.issuer.name': 'Issuer Name',\n    'issuer.config.issuer.url': 'Issuer URL',\n    'issuer.config.jwks.url': 'JWKS URL',\n    'issuer.config.audience': 'Audience',\n    'issuer.config.claim.mappings': 'Claim Mappings',\n    // Property Help Text\n    'property.token.location.help': 'Specifies where to look for the JWT token (Header, Query Parameter, or Cookie)',\n    'property.token.header.help': 'The name of the header containing the JWT token',\n    'property.custom.header.name.help': 'Custom header name when using a non-standard header',\n    'property.bearer.token.prefix.help': 'Prefix used before the token in the Authorization header (e.g., \"Bearer\")',\n    'property.require.valid.token.help': 'Whether to require a valid token for all requests',\n    'property.jwks.refresh.interval.help': 'How often to refresh the JWKS keys from the server',\n    'property.maximum.token.size.help': 'Maximum allowed size of the JWT token in bytes',\n    'property.allowed.algorithms.help': 'List of allowed signature algorithms for token validation',\n    'property.require.https.jwks.help': 'Whether to require HTTPS for JWKS URLs',\n    'test.onlyInEnglish': 'English Only' // Added for the test case\n  },\n  de: {\n    // Common\n    'common.loading': 'Wird geladen...',\n    'common.error': 'Fehler',\n    'common.success': 'Erfolg',\n    'common.save': 'Speichern',\n    'common.cancel': 'Abbrechen',\n    'common.add': 'Hinzufügen',\n    'common.remove': 'Entfernen',\n    'common.edit': 'Bearbeiten',\n    'common.verify': 'Überprüfen',\n    'common.details': 'Details',\n    'common.name': 'Name',\n    'common.value': 'Wert',\n    'common.yes': 'Ja',\n    'common.no': 'Nein',\n    // JWT Validator\n    'jwt.validator.title': 'JWT Token Validator',\n    'jwt.validator.loading': 'JWT Validator UI wird geladen...',\n    // Token Verification\n    'token.verification.title': 'Token-Überprüfung',\n    'token.verification.input.label': 'JWT Token eingeben',\n    'token.verification.button': 'Token überprüfen',\n    'token.verification.valid': 'Token ist gültig',\n    'token.verification.invalid': 'Token ist ungültig',\n    'token.verification.error': 'Fehler bei der Token-Überprüfung',\n    'token.verification.loading': 'Token wird überprüft...',\n    'token.verification.details': 'Token-Details',\n    'token.verification.claims': 'Claims',\n    'token.verification.raw': 'Rohtoken',\n    // JWKS Validation\n    'jwks.validation.title': 'JWKS-Validierung',\n    'jwks.validation.button': 'JWKS-URL überprüfen',\n    'jwks.validation.success': 'JWKS-URL ist gültig',\n    'jwks.validation.error': 'JWKS-URL ist ungültig',\n    'processor.jwt.failed': 'Fehler',\n    'processor.jwt.ok': 'OK',\n    // Issuer Configuration\n    'issuer.config.title': 'Aussteller-Konfiguration',\n    'issuer.config.add': 'Aussteller hinzufügen',\n    'issuer.config.remove': 'Aussteller entfernen',\n    'issuer.config.save': 'Konfiguration speichern',\n    'issuer.config.issuer.name': 'Ausstellername',\n    'issuer.config.issuer.url': 'Aussteller-URL',\n    'issuer.config.jwks.url': 'JWKS-URL',\n    'issuer.config.audience': 'Zielgruppe',\n    'issuer.config.claim.mappings': 'Claim-Zuordnungen',\n    // Property Help Text\n    'property.token.location.help': 'Gibt an, wo nach dem JWT-Token gesucht werden soll (Header, Query-Parameter oder Cookie)',\n    'property.token.header.help': 'Der Name des Headers, der das JWT-Token enthält',\n    'property.custom.header.name.help': 'Benutzerdefinierter Header-Name bei Verwendung eines nicht standardmäßigen Headers',\n    'property.bearer.token.prefix.help': 'Präfix vor dem Token im Authorization-Header (z.B. \"Bearer\")',\n    'property.require.valid.token.help': 'Ob für alle Anfragen ein gültiges Token erforderlich ist',\n    'property.jwks.refresh.interval.help': 'Wie oft die JWKS-Schlüssel vom Server aktualisiert werden sollen',\n    'property.maximum.token.size.help': 'Maximal zulässige Größe des JWT-Tokens in Bytes',\n    'property.allowed.algorithms.help': 'Liste der erlaubten Signaturalgorithmen für die Token-Validierung',\n    'property.require.https.jwks.help': 'Ob HTTPS für JWKS-URLs erforderlich ist'\n  }\n};\n\n/**\n     * Detects the browser language preference.\n     *\n     * @returns {string} The detected language code (e.g., 'en' from 'en-US')\n     */\nvar detectBrowserLanguage = function detectBrowserLanguage() {\n  // Get browser language\n  var browserLanguage = navigator.language || navigator.userLanguage || 'en';\n\n  // Extract the language code (e.g., 'en' from 'en-US')\n  var languageCode = browserLanguage.split('-')[0];\n\n  // Return the language code if it's supported, otherwise return the default language\n  return availableLanguages.includes(languageCode) ? languageCode : 'en';\n};\n\n/**\n     * Sets the current language.\n     *\n     * @param {string} langCode - The language code to set\n     * @returns {boolean} True if the language was set successfully, false otherwise\n     */\nvar setLanguage = function setLanguage(langCode) {\n  if (availableLanguages.includes(langCode)) {\n    currentLanguage = langCode;\n    return true;\n  }\n  return false;\n};\n\n/**\n     * Gets the current language.\n     *\n     * @returns {string} The current language code\n     */\nvar getLanguage = function getLanguage() {\n  return currentLanguage;\n};\n\n/**\n     * Gets the list of available languages.\n     *\n     * @returns {Array} The list of available language codes\n     */\nvar getAvailableLanguages = function getAvailableLanguages() {\n  return availableLanguages;\n};\n\n/**\n     * Translates a key to the current language.\n     *\n     * @param {string} key - The translation key\n     * @param {Object} [params] - Optional parameters to substitute in the translation\n     * @returns {string} The translated text\n     */\nvar translate = function translate(key, params) {\n  // Get the translation for the current language\n  var translation = translations[currentLanguage] && translations[currentLanguage][key];\n\n  // If the translation doesn't exist, try to get it from the default language\n  var defaultTranslation = translations.en && translations.en[key];\n\n  // Use the translation, the default translation, or the key itself\n  var result = translation || defaultTranslation || key;\n\n  // Substitute parameters if provided\n  if (params) {\n    Object.keys(params).forEach(function (param) {\n      result = result.replace(new RegExp(\"{\".concat(param, \"}\"), 'g'), params[param]);\n    });\n  }\n  return result;\n};\n\n// Initialize the language based on browser preference\nsetLanguage(detectBrowserLanguage());\n\n// No explicit default export, only named exports.\n// EXTERNAL MODULE: external \"tippy\"\nvar external_tippy_ = __webpack_require__(566);\nvar external_tippy_default = /*#__PURE__*/__webpack_require__.n(external_tippy_);\n;// ./src/main/webapp/js/utils/tooltip.js\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n// utils/tooltip.js\n\n // Import nfCommon\n// Note: CSS files for tippy.js should be included in the main HTML or via separate CSS build process\n\nfunction initTooltips(selector) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document;\n  var elements = typeof selector === 'string' ? context.querySelectorAll(selector) : Array.isArray(selector) ? selector : [selector];\n  if (elements.length === 0) return null;\n\n  // Default options similar to our jQuery UI tooltip config\n  var defaultOptions = {\n    placement: 'bottom-start',\n    // Similar to our jQuery UI positioning\n    arrow: true,\n    theme: 'light-border',\n    appendTo: 'parent' // Attaches tooltip to parent instead of document.body\n  };\n\n  // Merge default options with provided options\n  var tippyOptions = _objectSpread(_objectSpread({}, defaultOptions), options);\n  try {\n    return external_tippy_default()(Array.from(elements), tippyOptions);\n  } catch (error) {\n    // Log error if Tippy.js initialization fails.\n    if (nf_common && nf_common.logError) {\n      nf_common.logError('Error initializing tooltip: ' + error.message);\n    }\n    // It's important to return null or an empty instance array if tippy fails,\n    // consistent with tippy's behavior on empty selectors.\n    return null;\n  }\n}\n;// ./src/main/webapp/js/main.js\n/**\n * Main module for MultiIssuerJWTTokenAuthenticator UI components.\n * Provides functionality for custom UI components in NiFi.\n */\n\n\n\n\n\n\n\n// jQuery UI is already loaded via script tag\n'use strict';\nvar jwtComponentsRegistered = false;\n\n// Register custom UI components\nvar registerCustomUiComponents = function registerCustomUiComponents() {\n  // Check if components have already been registered\n  if (jwtComponentsRegistered) {\n    return;\n  }\n\n  // Initialize i18n with browser language\n  getLanguage(); // Result was unused, called for potential side effects.\n\n  // Register Issuer Config Editor component for the issuer configuration tab\n  nf_common.registerCustomUiTab('jwt.validation.issuer.configuration', issuerConfigEditor_namespaceObject);\n\n  // Register Token Verifier component for the verification tab\n  nf_common.registerCustomUiTab('jwt.validation.token.verification', tokenVerifier_namespaceObject);\n\n  // Register help tooltips\n  registerHelpTooltips();\n\n  // Set the flag to indicate components have been registered\n  jwtComponentsRegistered = true;\n};\n\n/**\n     * Registers help tooltips for properties.\n     * @param {Element} [contextElement] - Optional context within which to find elements.\n     */\nvar registerHelpTooltips = function registerHelpTooltips(contextElement) {\n  var baseElement = contextElement || document; // baseElement is a raw DOM node\n  external_cash_default()(baseElement).find('.property-label').each(function (_index, labelNode) {\n    var propertyName = external_cash_default()(labelNode).text().trim();\n    var helpText = getHelpTextForProperty(propertyName);\n    if (helpText) {\n      // Check if span already exists\n      if (external_cash_default()(labelNode).find('span.help-tooltip').length === 0) {\n        var span = external_cash_default()('<span>');\n        external_cash_default()(span).addClass('help-tooltip fa fa-question-circle');\n        external_cash_default()(span).attr('title', helpText);\n        external_cash_default()(labelNode).append(span);\n      }\n    }\n  });\n\n  // Initialize tooltips\n  try {\n    var tooltipSelector = '.help-tooltip';\n    // contextElement is expected to be a raw DOM element if provided for initTooltips.\n    // initTooltips expects a DOM element or a selector string for its context.\n    var contextForInit = contextElement || document;\n    initTooltips(tooltipSelector, {\n      // placement: 'bottom-start' // This is the default in initTooltips\n    }, contextForInit);\n  } catch (e) {\n    // Error initializing tooltips\n    // eslint-disable-next-line no-console\n    console.error('Error initializing tooltips:', e);\n  }\n};\n\n/**\n     * Gets help text for a property.\n     *\n     * @param {string} propertyName - The name of the property\n     * @return {string} The help text for the property\n     */\nvar getHelpTextForProperty = function getHelpTextForProperty(propertyName) {\n  // Map property names to i18n keys\n  var helpTextKeys = {\n    'Token Location': 'property.token.location.help',\n    'Token Header': 'property.token.header.help',\n    'Custom Header Name': 'property.custom.header.name.help',\n    'Bearer Token Prefix': 'property.bearer.token.prefix.help',\n    'Require Valid Token': 'property.require.valid.token.help',\n    'JWKS Refresh Interval': 'property.jwks.refresh.interval.help',\n    'Maximum Token Size': 'property.maximum.token.size.help',\n    'Allowed Algorithms': 'property.allowed.algorithms.help',\n    'Require HTTPS for JWKS URLs': 'property.require.https.jwks.help'\n  };\n\n  // Get the i18n key for the property\n  var key = helpTextKeys[propertyName];\n\n  // Return the translated text using nfCommon.getI18n().getProperty()\n  return key ? nf_common.getI18n().getProperty(key) : '';\n};\n\n/**\n     * Hides the loading indicator and shows the UI components.\n     */\nvar hideLoadingIndicator = function hideLoadingIndicator() {\n  var loadingIndicator = external_cash_default()('#loading-indicator');\n  if (loadingIndicator.length) {\n    external_cash_default()(loadingIndicator).hide();\n  }\n  var tabs = external_cash_default()('#jwt-validator-tabs');\n  if (tabs.length) {\n    external_cash_default()(tabs).show();\n  }\n};\n\n/**\n     * Updates UI text with translations from the current language.\n     */\nvar updateUITranslations = function updateUITranslations() {\n  // Update loading indicator text\n  var loadingIndicator = external_cash_default()('#loading-indicator');\n  if (loadingIndicator.length) {\n    external_cash_default()(loadingIndicator).text(nf_common.getI18n().getProperty('jwt.validator.loading'));\n  }\n\n  // Update other static UI elements\n  var titleElement = external_cash_default()('.jwt-validator-title');\n  if (titleElement.length) {\n    external_cash_default()(titleElement).text(nf_common.getI18n().getProperty('jwt.validator.title'));\n  }\n};\n\n/**\n * Initializes the custom UI components.\n */\nvar main_init = function init() {\n  // Update UI translations immediately\n  updateUITranslations();\n\n  // Register event to ensure UI is properly loaded after NiFi completes initialization\n  if (typeof nf !== 'undefined' && nf.Canvas && nf.Canvas.initialized) {\n    registerCustomUiComponents();\n    // Hide loading indicator and show UI components\n    hideLoadingIndicator();\n  } else {\n    // Wait for NiFi to be fully initialized\n    document.addEventListener('nfCanvasInitialized', function () {\n      registerCustomUiComponents();\n      // Hide loading indicator and show UI components\n      hideLoadingIndicator();\n    });\n  }\n\n  // Register custom UI components when the document is ready\n  document.addEventListener('DOMContentLoaded', function () {\n    registerCustomUiComponents();\n\n    // Update UI translations\n    updateUITranslations();\n\n    // Hide loading indicator and show UI components\n    hideLoadingIndicator();\n\n    // Add event listener to track when the processor dialog opens\n    // Note: The conversion of $(document).on('dialogOpen', function (event, dialogContentElement)\n    // is complex due to how jQuery handles custom events and additional parameters.\n    // If 'dialogOpen' is a standard browser event, this is fine.\n    // If it's a jQuery custom event triggered with extra parameters,\n    // those parameters (dialogContentElement) won't be passed the same way.\n    // Assuming 'dialogOpen' might be a custom event and for simplicity,\n    // this specific handler will be left using cash-dom for now as per worker decision.\n    // If it must be Vanilla JS, the event dispatch and listening mechanism needs careful review.\n    // NiFi likely triggers 'dialogOpen' using jQuery's `trigger` method, passing `dialogContentElement` as an extra parameter.\n    // Vanilla JS's `addEventListener` does not support this directly. Re-triggering would involve\n    // finding all `trigger('dialogOpen')` calls and modifying them to use `CustomEvent` with a `detail` property,\n    // which is a broader change than the current scope.\n    // Handles re-initialization of tooltips and translations when a NiFi dialog opens,\n    // specifically targeting dialogs for the MultiIssuerJWTTokenAuthenticator.\n    external_cash_default()(document).on('dialogOpen', function (_event, data) {\n      var dialogContentElement = Array.isArray(data) ? data[0] : data;\n\n      // $dialog is no longer needed as we will use dialogContentElement directly for classList and querySelector\n      if (dialogContentElement && dialogContentElement.classList && dialogContentElement.classList.contains('processor-dialog')) {\n        // Use setTimeout to allow the dialog to fully render\n        setTimeout(function () {\n          var processorTypeElement = dialogContentElement.querySelector('.processor-type');\n          var processorType = processorTypeElement ? processorTypeElement.textContent.trim() : '';\n          if (processorType.includes('MultiIssuerJWTTokenAuthenticator')) {\n            registerHelpTooltips(dialogContentElement); // Pass raw DOM element as context\n            // Update translations in the dialog\n            updateUITranslations(); // This is global, might need context too if dialog has elements it targets\n          }\n        }, 500);\n      }\n    });\n  });\n\n  // Add a delayed check to ensure loading indicator is hidden\n  setTimeout(function () {\n    // Ensure loading indicator is hidden\n    hideLoadingIndicator();\n    // Ensure translations are applied\n    updateUITranslations();\n    // This timeout acts as a final safeguard to ensure UI elements are correctly shown\n    // and translated, especially if earlier event-driven initializations were missed or delayed.\n  }, 3000);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///607\n");

/***/ }),

/***/ 651:
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE__651__;

/***/ }),

/***/ 709:
/***/ ((module) => {

eval("/**\n * Mock implementation of nf.Common for testing.\n * Provides simplified versions of NiFi Common functions used in the code.\n */\n\nvar nfCommon = {\n  /**\n   * Mock implementation of getI18n.\n   * Returns a mock i18n object with translations.\n   */\n  getI18n: jest.fn().mockImplementation(function () {\n    // Create translations\n    var translations = {\n      'testConnection': 'Test Connection',\n      'testing': 'Testing...',\n      'invalidType': 'Invalid JWKS type',\n      'validJwks': 'Valid JWKS',\n      'keysFound': 'keys found',\n      'invalidJwks': 'Invalid JWKS',\n      'validationError': 'Validation error',\n      'tokenInput': 'JWT Token',\n      'tokenInputPlaceholder': 'Paste your JWT token here',\n      'verifyToken': 'Verify Token',\n      'verificationResults': 'Verification Results',\n      'noTokenProvided': 'No token provided',\n      'verifying': 'Verifying token...',\n      'tokenValid': 'Token is valid',\n      'tokenDetails': 'Token Details',\n      'subject': 'Subject',\n      'issuer': 'Issuer',\n      'audience': 'Audience',\n      'expiration': 'Expiration',\n      'roles': 'Roles',\n      'scopes': 'Scopes',\n      'allClaims': 'All Claims',\n      'tokenInvalid': 'Token is invalid',\n      'errorDetails': 'Error Details',\n      'errorCategory': 'Error Category',\n      'verificationError': 'Verification error'\n    };\n\n    // Create the nested structure that matches what the code expects\n    return {\n      'processor.jwt.testConnection': 'Test Connection',\n      'processor.jwt.testing': 'Testing...',\n      'processor.jwt.invalidType': 'Invalid JWKS type',\n      'processor.jwt.validJwks': 'Valid JWKS',\n      'processor.jwt.keysFound': 'keys found',\n      'processor.jwt.invalidJwks': 'Invalid JWKS',\n      'processor.jwt.validationError': 'Validation error',\n      'processor.jwt.tokenInput': 'JWT Token',\n      'processor.jwt.tokenInputPlaceholder': 'Paste your JWT token here',\n      'processor.jwt.verifyToken': 'Verify Token',\n      'processor.jwt.verificationResults': 'Verification Results',\n      'processor.jwt.noTokenProvided': 'No token provided',\n      'processor.jwt.verifying': 'Verifying token...',\n      'processor.jwt.tokenValid': 'Token is valid',\n      'processor.jwt.tokenDetails': 'Token Details',\n      'processor.jwt.subject': 'Subject',\n      'processor.jwt.issuer': 'Issuer',\n      'processor.jwt.audience': 'Audience',\n      'processor.jwt.expiration': 'Expiration',\n      'processor.jwt.roles': 'Roles',\n      'processor.jwt.scopes': 'Scopes',\n      'processor.jwt.allClaims': 'All Claims',\n      'processor.jwt.tokenInvalid': 'Token is invalid',\n      'processor.jwt.errorDetails': 'Error Details',\n      'processor.jwt.errorCategory': 'Error Category',\n      'processor.jwt.verificationError': 'Verification error',\n      processor: {\n        jwt: translations\n      }\n    };\n  }),\n  /**\n   * Mock implementation of registerCustomUiComponent.\n   * Records that a custom UI component was registered.\n   */\n  registerCustomUiComponent: jest.fn(),\n  /**\n   * Mock implementation of registerCustomUiTab.\n   * Records that a custom UI tab was registered.\n   */\n  registerCustomUiTab: jest.fn(),\n  /**\n   * Mock implementation of escapeHtml.\n   * Escapes HTML special characters.\n   */\n  escapeHtml: jest.fn().mockImplementation(function (str) {\n    if (!str) {\n      return '';\n    }\n    return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#039;');\n  }),\n  /**\n   * Mock implementation of formatValue.\n   * Formats a value for display.\n   */\n  formatValue: jest.fn().mockImplementation(function (value) {\n    if (value === null || value === undefined) {\n      return '';\n    }\n    return value.toString();\n  }),\n  /**\n   * Mock implementation of formatDateTime.\n   * Formats a date/time value.\n   */\n  formatDateTime: jest.fn().mockImplementation(function (datetime) {\n    if (!datetime) {\n      return '';\n    }\n    try {\n      var date = new Date(datetime);\n      return date.toLocaleString();\n    } catch (e) {\n      return datetime;\n    }\n  }),\n  /**\n   * Mock implementation of showMessage.\n   * Records that a message was shown.\n   */\n  showMessage: jest.fn(),\n  /**\n   * Mock implementation of showConfirmationDialog.\n   * Records that a confirmation dialog was shown.\n   */\n  showConfirmationDialog: jest.fn(),\n  /**\n   * Mock implementation of ajax.\n   * Provides a mock AJAX implementation.\n   */\n  ajax: jest.fn().mockImplementation(function (options) {\n    var mockPromise = {\n      done: function done(callback) {\n        this.doneCallback = callback;\n        return this;\n      },\n      fail: function fail(callback) {\n        this.failCallback = callback;\n        return this;\n      }\n    };\n\n    // Store the options for later inspection in tests\n    mockPromise.options = options;\n\n    // Return the mock promise\n    return mockPromise;\n  })\n};\nmodule.exports = nfCommon;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///709\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__(607);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});