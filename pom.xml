<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.apache.nifi</groupId>
        <artifactId>nifi-extension-bundles</artifactId>
        <version>2.4.0</version>
    </parent>

    <groupId>de.cuioss.nifi</groupId>
    <artifactId>nifi-extensions</artifactId>
    <name>Apache Nifi extensions</name>
    <version>1.0-SNAPSHOT</version>
    <description>Some extensions for apache nifi</description>
    <packaging>pom</packaging>

    <url>https://github.com/cuioss/nifi-extensions/</url>
    <scm>
        <url>https://github.com/cuioss/nifi-extensions/</url>
        <connection>
            scm:git:https://github.com/cuioss/nifi-extensions.git
        </connection>
        <developerConnection>
            scm:git:https://github.com/cuioss/nifi-extensions/
        </developerConnection>
        <tag>HEAD</tag>
    </scm>
    <issueManagement>
        <url>https://github.com/cuioss/nifi-extensions/issues</url>
        <system>GitHub Issues</system>
    </issueManagement>

    <properties>
        <maven.compiler.target>21</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <version.nifi>2.4.0</version.nifi>
        <!-- Sonar related-->
        <sonar.organization>cuioss-github</sonar.organization>
        <sonar.host.url>https://sonarcloud.io</sonar.host.url>
        <!-- Exclude e-2-e-playwright module from SonarQube analysis -->
        <sonar.exclusions>e-2-e-playwright/**</sonar.exclusions>
        <sonar.skip>false</sonar.skip>
        <!-- Maven Plugins -->
        <maven.compiler.plugin.version>3.14.0</maven.compiler.plugin.version>
        <maven.gpg.plugin.version>3.2.7</maven.gpg.plugin.version>
        <maven.exec.plugin.version>3.5.0</maven.exec.plugin.version>
        <central-publishing-maven-plugin.version>0.8.0</central-publishing-maven-plugin.version>
        <sonar.maven.plugin.version>5.1.0.4751</sonar.maven.plugin.version>
        <jacoco.maven.plugin.version>0.8.13</jacoco.maven.plugin.version>
        <!-- Sonatype -->

        <!-- OpenRewrite -->
        <open.rewrite.maven.plugin.version>6.11.0</open.rewrite.maven.plugin.version>
        <rewrite-testing-frameworks.version>3.10.0</rewrite-testing-frameworks.version>
        <rewrite-migrate-java.version>3.11.0</rewrite-migrate-java.version>
        <project.build.outputTimestamp>2025-04-30T06:58:46Z</project.build.outputTimestamp>

        <!-- Frontend Maven Plugin -->
        <frontend.maven.plugin.version>1.15.1</frontend.maven.plugin.version>
        <frontend.node.version>v20.19.2</frontend.node.version>
        <frontend.npm.version>10.5.0</frontend.npm.version>

        <!-- WebJars Dependencies -->
        <version.jquery>3.7.1</version.jquery>
        <version.jquery-ui>1.14.1</version.jquery-ui>
        <version.requirejs>2.3.7</version.requirejs>
        <version.cash-dom>8.1.5</version.cash-dom>
        <version.tippy.js>6.3.7</version.tippy.js>
        <version.popperjs__core>2.11.8</version.popperjs__core>

        <!-- Logging Dependencies -->
        <version.slf4j>2.0.17</version.slf4j>

        <!-- The version needs to be aligned with the one defined within the nifi boms. Otherwise, it's getting messy-->
        <version.junit.jupiter>5.11.3</version.junit.jupiter>
        <version.lombok>1.18.38</version.lombok>
        <version.parsson>1.1.7</version.parsson>
        <!-- CUI-OSS -->
        <version.cui.test.juli.logger>2.0.1</version.cui.test.juli.logger>
        <version.cui.test.generator>2.3.1</version.cui.test.generator>
        <version.cui.test.value.objects>2.0.1</version.cui.test.value.objects>
        <version.cui.test.mockwebserver>1.3.0</version.cui.test.mockwebserver>
        <version.cui.java.tools>2.2.1</version.cui.java.tools>
        <version.cui-jwt-validation>1.0.0-SNAPSHOT</version.cui-jwt-validation>
        <version.cui.test.keycloak.integration>1.0.1</version.cui.test.keycloak.integration>
    </properties>

    <licenses>
        <license>
            <name>The Apache Software License, Version 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
            <distribution>repo</distribution>
        </license>
    </licenses>
    <developers>
        <developer>
            <name>Oliver Wolff</name>
            <url>https://github.com/cuioss</url>
            <roles>
                <role>owner</role>
                <role>developer</role>
            </roles>
        </developer>
    </developers>
    <organization>
        <url>https://github.com/cuioss</url>
        <name>CUI-OpenSource-Software</name>
    </organization>

    <distributionManagement>
        <snapshotRepository>
            <id>central</id>
            <name>Maven Central Snapshots</name>
            <url>https://central.sonatype.com/repository/maven-snapshots/</url>
        </snapshotRepository>
        <repository>
            <id>central</id>
            <name>Maven Central Releases</name>
            <url>https://central.sonatype.com/repository/maven-releases/</url>
        </repository>
        <site>
            <id>cuioss-home</id>
            <url>https://cuioss.github.io/</url>
        </site>
    </distributionManagement>
    <repositories>
        <repository>
            <id>sonatype-snapshots</id>
            <name>Sonatype Snapshot Repository</name>
            <url>https://central.sonatype.com/repository/maven-snapshots/</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
    </repositories>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${version.lombok}</version>
                <scope>provided</scope>
            </dependency>
            <!-- WebJars dependencies -->
            <dependency>
                <groupId>org.webjars</groupId>
                <artifactId>jquery</artifactId>
                <version>${version.jquery}</version>
            </dependency>
            <dependency>
                <groupId>org.webjars</groupId>
                <artifactId>jquery-ui</artifactId>
                <version>${version.jquery-ui}</version>
            </dependency>
            <dependency>
                <groupId>org.webjars</groupId>
                <artifactId>requirejs</artifactId>
                <version>${version.requirejs}</version>
            </dependency>
            <dependency>
                <groupId>org.webjars.npm</groupId>
                <artifactId>cash-dom</artifactId>
                <version>${version.cash-dom}</version>
            </dependency>
            <dependency>
                <groupId>org.webjars.npm</groupId>
                <artifactId>tippy.js</artifactId>
                <version>${version.tippy.js}</version>
            </dependency>
            <dependency>
                <groupId>org.webjars.npm</groupId>
                <artifactId>popperjs__core</artifactId>
                <version>${version.popperjs__core}</version>
            </dependency>
            <!-- Incoming-->
            <dependency>
                <groupId>org.junit</groupId>
                <artifactId>junit-bom</artifactId>
                <version>${version.junit.jupiter}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.apache.nifi</groupId>
                <artifactId>nifi-utils</artifactId>
                <version>${version.nifi}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.nifi</groupId>
                <artifactId>nifi-mock</artifactId>
                <version>${version.nifi}</version>
                <scope>test</scope>
            </dependency>
            <!-- CUI-OSS -->
            <dependency>
                <groupId>de.cuioss</groupId>
                <artifactId>cui-java-tools</artifactId>
                <version>${version.cui.java.tools}</version>
                <scope>compile</scope>
            </dependency>
            <dependency>
                <groupId>de.cuioss.test</groupId>
                <artifactId>cui-test-juli-logger</artifactId>
                <version>${version.cui.test.juli.logger}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>de.cuioss.test</groupId>
                <artifactId>cui-test-value-objects</artifactId>
                <version>${version.cui.test.value.objects}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>de.cuioss.test</groupId>
                <artifactId>cui-test-generator</artifactId>
                <version>${version.cui.test.generator}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>de.cuioss.test</groupId>
                <artifactId>cui-test-mockwebserver-junit5</artifactId>
                <version>${version.cui.test.mockwebserver}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>de.cuioss.jwt</groupId>
                <artifactId>cui-jwt-validation</artifactId>
                <version>${version.cui-jwt-validation}</version>
                <scope>compile</scope>
            </dependency>
            <dependency>
                <groupId>de.cuioss</groupId>
                <artifactId>cui-jwt-validation</artifactId>
                <version>${version.cui-jwt-validation}</version>
                <classifier>generators</classifier>
                <scope>test</scope>
            </dependency>
            <!-- Implementation of jakarta.json-api: Used for cui-jwt-validation-->
            <dependency>
                <groupId>org.eclipse.parsson</groupId>
                <artifactId>parsson</artifactId>
                <version>${version.parsson}</version>
                <scope>runtime</scope>
            </dependency>
            <dependency>
                <groupId>de.cuioss.test</groupId>
                <artifactId>cui-test-keycloak-integration</artifactId>
                <version>${version.cui.test.keycloak.integration}</version>
                <scope>test</scope>
            </dependency>
            <!-- Simple implementation that is actually a bridge to juli logging. Used for test-containers slf4j -->
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-jdk14</artifactId>
                <scope>test</scope>
                <version>${version.slf4j}</version>
            </dependency>
            <!-- Bridge jakarta-commons logging  to slf4j -->
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>jcl-over-slf4j</artifactId>
                <scope>test</scope>
                <version>${version.slf4j}</version>
            </dependency>
            <!-- outgoing-->
            <dependency>
                <groupId>de.cuioss.nifi</groupId>
                <artifactId>nifi-cuioss-processors</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>de.cuioss.nifi</groupId>
                <artifactId>nifi-cuioss-ui</artifactId>
                <version>${project.version}</version>
                <type>war</type>
            </dependency>
            <dependency>
                <groupId>org.apache.nifi</groupId>
                <artifactId>nifi-standard-services-api-nar</artifactId>
                <version>${version.nifi}</version>
                <type>nar</type>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <modules>
        <module>nifi-cuioss-processors</module>
        <module>nifi-cuioss-ui</module>
        <module>nifi-cuioss-nar</module>
        <module>integration-testing</module>
        <module>e-2-e-playwright</module>
    </modules>
    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven.compiler.plugin.version}</version>
                    <configuration>
                        <annotationProcessorPaths>
                            <annotationProcessorPath>
                                <groupId>org.projectlombok</groupId>
                                <artifactId>lombok</artifactId>
                                <version>${version.lombok}</version>
                            </annotationProcessorPath>
                        </annotationProcessorPaths>
                        <release>21</release>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-gpg-plugin</artifactId>
                    <version>${maven.gpg.plugin.version}</version>
                    <configuration>
                        <gpgArguments>
                            <arg>--pinentry-mode</arg>
                            <arg>loopback</arg>
                        </gpgArguments>
                    </configuration>
                    <executions>
                        <execution>
                            <id>sign-artifacts</id>
                            <phase>verify</phase>
                            <goals>
                                <goal>sign</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.sonatype.central</groupId>
                    <artifactId>central-publishing-maven-plugin</artifactId>
                    <version>${central-publishing-maven-plugin.version}</version>
                    <extensions>true</extensions>
                    <configuration>
                        <publishingServerId>central</publishingServerId>
                        <autoPublish>true</autoPublish>
                        <waitUntil>published</waitUntil>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.sonarsource.scanner.maven</groupId>
                    <artifactId>sonar-maven-plugin</artifactId>
                    <version>${sonar.maven.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.jacoco</groupId>
                    <artifactId>jacoco-maven-plugin</artifactId>
                    <version>${jacoco.maven.plugin.version}</version>
                    <executions>
                        <execution>
                            <id>prepare-agent</id>
                            <goals>
                                <goal>prepare-agent</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>report</id>
                            <goals>
                                <goal>report</goal>
                            </goals>
                            <configuration>
                                <formats>
                                    <format>XML</format>
                                </formats>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.openrewrite.maven</groupId>
                    <artifactId>rewrite-maven-plugin</artifactId>
                    <version>${open.rewrite.maven.plugin.version}</version>
                    <dependencies>
                        <dependency>
                            <groupId>org.openrewrite.recipe</groupId>
                            <artifactId>rewrite-migrate-java</artifactId>
                            <version>${rewrite-migrate-java.version}</version>
                        </dependency>
                        <dependency>
                            <groupId>org.openrewrite.recipe</groupId>
                            <artifactId>rewrite-testing-frameworks</artifactId>
                            <version>${rewrite-testing-frameworks.version}</version>
                        </dependency>
                    </dependencies>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
    <profiles>
        <profile>
            <id>sonar</id>
            <modules>
                <module>nifi-cuioss-processors</module>
                <module>nifi-cuioss-ui</module>
                <module>nifi-cuioss-nar</module>
                <module>integration-testing</module>
                <!-- e-2-e-playwright module excluded from sonar analysis -->
            </modules>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.jacoco</groupId>
                        <artifactId>jacoco-maven-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <argLine>@{argLine} -Xms64m -Xmx1024m</argLine>
                            <redirectTestOutputToFile>true</redirectTestOutputToFile>
                            <printSummary>true</printSummary>
                            <trimStackTrace>false</trimStackTrace>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.sonarsource.scanner.maven</groupId>
                        <artifactId>sonar-maven-plugin</artifactId>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>local-integration-tests</id>
            <activation>
                <property>
                    <name>integration.test.local</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <!-- First, ensure NAR file is built and deployed -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>${maven.exec.plugin.version}</version>
                        <executions>
                            <!-- Create deployment directory -->
                            <execution>
                                <id>create-deploy-dir</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>mkdir</executable>
                                    <arguments>
                                        <argument>-p</argument>
                                        <argument>${project.basedir}/target/nifi-deploy</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <!-- Build and deploy NAR files -->
                            <execution>
                                <id>deploy-nar-files</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>bash</executable>
                                    <workingDirectory>${project.basedir}/integration-testing/src/main/docker</workingDirectory>
                                    <arguments>
                                        <argument>./copy-deployment.sh</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <!-- Start Docker containers -->
                            <execution>
                                <id>start-containers</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker</executable>
                                    <workingDirectory>${project.basedir}/integration-testing/src/main/docker</workingDirectory>
                                    <arguments>
                                        <argument>compose</argument>
                                        <argument>up</argument>
                                        <argument>-d</argument>
                                        <argument>--build</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <!-- Wait for containers to be healthy -->
                            <execution>
                                <id>wait-for-containers</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>bash</executable>
                                    <workingDirectory>${project.basedir}/integration-testing/src/main/docker</workingDirectory>
                                    <arguments>
                                        <argument>-c</argument>
                                        <argument><![CDATA[
                                            echo "Waiting for containers to start..."
                                            timeout=600
                                            elapsed=0
                                            while [ $elapsed -lt $timeout ]; do
                                                if docker compose ps --filter "status=running" | grep -q "nifi\|keycloak"; then
                                                    echo "Containers are running, waiting additional 30 seconds for full startup..."
                                                    sleep 30
                                                    if curl -k --fail --max-time 10 https://localhost:9095/nifi/ > /dev/null 2>&1; then
                                                        echo "NiFi is accessible and ready!"
                                                        exit 0
                                                    fi
                                                fi
                                                echo "Waiting for containers... ($elapsed/$timeout seconds)"
                                                sleep 10
                                                elapsed=$((elapsed + 10))
                                            done
                                            echo "Timeout waiting for containers to be ready"
                                            exit 1
                                        ]]></argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <!-- Stop containers after tests -->
                            <execution>
                                <id>stop-containers</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker</executable>
                                    <workingDirectory>${project.basedir}/integration-testing/src/main/docker</workingDirectory>
                                    <arguments>
                                        <argument>compose</argument>
                                        <argument>down</argument>
                                        <argument>-v</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!-- Usage: ./mvnw -Ppre-commit clean install -DskipTests -->
            <!-- Unifies all OpenRewrite modernization and preparation recipes -->
            <id>pre-commit</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.openrewrite.maven</groupId>
                        <artifactId>rewrite-maven-plugin</artifactId>
                        <configuration>
                            <activeRecipes>
                                <!-- Java Recipes -->
                                <recipe>org.openrewrite.java.AddApache2LicenseHeader</recipe>
                                <recipe>org.openrewrite.java.format.AutoFormat</recipe>
                                <recipe>org.openrewrite.java.format.NormalizeLineBreaks</recipe>
                                <recipe>org.openrewrite.java.format.RemoveTrailingWhitespace</recipe>
                                <recipe>org.openrewrite.java.migrate.UpgradeToJava21</recipe>
                                <recipe>org.openrewrite.java.migrate.util.JavaUtilAPIs</recipe>
                                <recipe>org.openrewrite.java.migrate.util.OptionalNotEmptyToIsPresent</recipe>
                                <recipe>org.openrewrite.java.migrate.util.OptionalNotPresentToIsEmpty</recipe>
                                <recipe>org.openrewrite.java.migrate.util.ReplaceStreamCollectWithToList</recipe>
                                <recipe>org.openrewrite.java.migrate.util.UseLocaleOf</recipe>
                                <recipe>org.openrewrite.java.migrate.util.UseMapOf</recipe>
                                <recipe>org.openrewrite.java.OrderImports</recipe>
                                <recipe>org.openrewrite.java.RemoveUnusedImports</recipe>
                                <recipe>org.openrewrite.java.ShortenFullyQualifiedTypeReferences</recipe>
                                <recipe>org.openrewrite.java.testing.junit5.JUnit5BestPractices</recipe>
                                <recipe>org.openrewrite.java.testing.junit5.RemoveTryCatchFailBlocks</recipe>
                                <recipe>org.openrewrite.staticanalysis.EqualsAvoidsNull</recipe>
                                <recipe>org.openrewrite.staticanalysis.NoPrimitiveWrappersForToStringOrCompareTo
                                </recipe>

                            </activeRecipes>
                        </configuration>
                        <executions>
                            <execution>
                                <id>rewrite</id>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>release-snapshot</id>
            <modules>
                <module>nifi-cuioss-processors</module>
                <module>nifi-cuioss-ui</module>
                <module>nifi-cuioss-nar</module>
                <module>integration-testing</module>
                <!-- e-2-e-playwright module excluded from release snapshots -->
            </modules>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>org.sonatype.central</groupId>
                        <artifactId>central-publishing-maven-plugin</artifactId>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>release</id>
            <modules>
                <module>nifi-cuioss-processors</module>
                <module>nifi-cuioss-ui</module>
                <module>nifi-cuioss-nar</module>
                <module>integration-testing</module>
                <!-- e-2-e-playwright module excluded from releases -->
            </modules>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>org.sonatype.central</groupId>
                        <artifactId>central-publishing-maven-plugin</artifactId>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
